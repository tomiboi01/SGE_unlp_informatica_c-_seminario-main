@page "/expediente/modificar/{Id:int}/{IdExp:int}"
@inject NavigationManager Navigation
@inject CasoDeUsoExpedienteModificacion casoDeUsoExpedienteModificar
@inject CasoDeUsoExpedienteConsultaPorId casoDeUsoExpedienteConsultaPorId
@inject NavigationManager Navigation
@inject IServicioAutorizacion ServicioAutorizacion
@rendermode InteractiveServer
<PageTitle>Modificar expediente</PageTitle>
@if (PoseePermiso())
{

  <h2> Modificando expediente número @IdExp</h2>
  <div>
    <label> Caratula:</label>
    <input placeholder=@aux.Caratula @bind-value="exp.Caratula">
  </div>
  <button class="btn btn-primary margin" @onclick="Modificar">Modificar</button>


}
@if (mensajeError != "")
{
  <div class="alert alert-danger margin alinear" role="alert">
    <strong>Error!</strong> @mensajeError.
    <button type="button" class="close" @onclick="CerrarError">x</button>
  </div>
}
@code
{
  [Parameter]
  public int IdExp { get; set; }
  [Parameter]
  public int Id { get; set; }

#nullable disable
  Expediente exp;
  Expediente aux;
#nullable enable
  string mensajeError = "";
  private void CerrarError() => mensajeError = "";
  private void Modificar()
  {
    try
    {
      casoDeUsoExpedienteModificar.Ejecutar(Id, exp);
      Navigation.NavigateTo($"/{Id}");
    }
    catch (Exception e)
    {
      mensajeError = e.Message;
    }
  }
  protected override void OnParametersSet()
  {
    exp = casoDeUsoExpedienteConsultaPorId.Ejecutar(IdExp);
    aux = new() { Caratula = exp.Caratula };

  }
  private bool PoseePermiso()
  {
    try
    {
      if (!ServicioAutorizacion.PoseeElPermiso(Id, Permiso.ExpedienteModificacion))
      {
        mensajeError = "No tiene los permisos necesarios para realizar esta operación";
        return false;
      }
      return true;
    }
    catch
    {
      mensajeError = "Ocurrió un error validando su usuario";
      return false;
    }

  }

}
<style>
  .margin {
    margin-bottom: 10px;
    margin-top: 30px;

  }
</style>