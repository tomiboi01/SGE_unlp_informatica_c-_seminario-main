@page "/usuarios/{Id:int}"

@inject CasoDeUsoUsuarioObtenerTodos casoDeUsoObtenerUsuarios
@inject NavigationManager Navigation
@inject IServicioAutorizacion ServicioAutorizacion
@rendermode InteractiveServer
<PageTitle>Mostrar usuarios</PageTitle>
@if (Id != 1)
{
    <div class="alert alert-danger" role="alert">
        <strong>No posee permisos para ver los usuarios registrados </strong>
    </div>
}
else
{
    <div class="container mt-5 ">
        <h2 class="text-center mb-4">Lista de Usuarios</h2>
        <div class="row">

            @foreach (Usuario user in usuarios)
            {
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@user.Nombre</h5>
                            <h6 class="card-text ">@user.Apellido</h6>
                            <p class="card-text">@user.CorreoElectronico</p>
                            <button class="btn btn-primary margin" @onclick="() => Modificar(user.Id)"> Modificar</button>
                            <button class="btn btn-danger margin" @onclick="() =>Eliminar(user.Id)"> Eliminar</button>
                        </div>
                    </div>
                </div>
            }
        </div>

    </div>

}

@code
{
    [Parameter]
    public int Id { get; set; }

#nullable disable
    List<Usuario> usuarios;
#nullable enable
    protected override void OnInitialized()
    {
        if (Id == 1)
        {
            usuarios = casoDeUsoObtenerUsuarios.Ejecutar();
        }

    }

    void Modificar(int idUsuario)
    {
        Navigation.NavigateTo($"/usuarios/modificar/{Id}/{idUsuario}");
    }
    void Eliminar(int idUsuario)
    {
        Navigation.NavigateTo($"/usuario/eliminar/{Id}/{idUsuario}");
    }


}