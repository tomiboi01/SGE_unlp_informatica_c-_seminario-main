@page "/usuarios/{Id:int}"

@inject CasoDeUsoUsuarioObtenerTodos casoDeUsoObtenerUsuarios
@inject NavigationManager Navigation
@inject IServicioAutorizacion ServicioAutorizacion
@rendermode InteractiveServer

@if (Id != 1)
{
    <div class="alert alert-danger" role="alert">
        <strong>No posee permisos para ver los usuarios registrados </strong>
    </div>
}
else
{
    @foreach (Usuario user in usuarios)
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">@user.Nombre</h5>
                <h6 class="card-text ">@user.Apellido</h6>
                <p class="card-text">@user.CorreoElectronico</p>
                <div class="nav-item px-3">
                    <button class="btn btn-primary" type="submit" @onclick="() =>Modificar(user.Id)"> Modificar</button>
                    <button class="btn btn-primary" type="submit" @onclick="() =>Eliminar(user.Id)"> Eliminar</button>

                    @for (int i = 0; i < user.Permisos.Count(); i++)
                    {
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="checkbox-@i" @bind="user.Permisos[i]"
                                />
                        </div>

                    }

                </div>


            </div>
        </div>
    }

}

@code
{
    [Parameter]
    public int Id { get; set; }

#nullable disable
    public List<Usuario> usuarios;

    List<Permiso> permiso = new List<Permiso>();
    protected override void OnInitialized()
    {
        if (Id == 1)
        {
            usuarios = casoDeUsoObtenerUsuarios.Ejecutar();
        }

    }

    private void Modificar(int idUsuario)
    {
        Navigation.NavigateTo($"/usuarios/modificar/{idUsuario}");
    }
    private void Eliminar(int idUsuario)
    {
        Navigation.NavigateTo($"/usuario/eliminar/{idUsuario}");
    }
    private void cambiarpermiso(int i)
    {
    }

}