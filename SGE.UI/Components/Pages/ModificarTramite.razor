@page "/tramite/modificar/{Id:int}/{IdTramite:int}"
@inject NavigationManager Navigation
@using SGE.Aplicacion
@inject CasoDeUsoTramiteModificacion casoDeUsoTramiteModificacion
@inject CasoDeUsoTramiteConsultaId casoDeUsoExpedienteConsultaPorId
@inject NavigationManager Navigation
@inject IServicioAutorizacion ServicioAutorizacion
@rendermode InteractiveServer
<PageTitle>Modificar trámite</PageTitle>
@if (PoseePermiso())
{
    <h2> Modificando tramite número @IdTramite</h2>
    <div>
        <label> Contenido:</label>
        <input placeholder=@_aux.Contenido @bind-value="_tra.Contenido">
        <label> Etiqueta </label>
        <select @bind="@_tra.Etiqueta">
            <option value="@EtiquetaTramite.EscritoPresentado">Escrito presentado</option>
            <option value="@EtiquetaTramite.PaseAEstudio">Pase a estudio</option>
            <option value="@EtiquetaTramite.Despacho"> Despachado</option>
            <option value="@EtiquetaTramite.Resolucion">Resolucion</option>
            <option value="@EtiquetaTramite.Notificacion">Notificación</option>
            <option value="@EtiquetaTramite.PaseAlArchivo">Pase al archivo</option>
        </select>
    </div>
    <button class="btn btn-primary margin" @onclick="Modificar">Modificar</button>

}

@if (_mensajeError != "")
    {
        <div class="alert alert-danger margin alinear" role= alert">
            <strong>Error!</strong> @_mensajeError
            <button type="button" class="close" @onclick="CerrarError">x</button>
        </div>
    }
@code
{
    [Parameter]
    public int IdTramite { get; set; }
    [Parameter]
    public int Id { get; set; }

#nullable disable
    Tramite _tra;
    Tramite _aux;
#nullable enable
    string _mensajeError = "";
     void CerrarError() => _mensajeError = "";
     void Modificar()
    {
        try
        {
            casoDeUsoTramiteModificacion.Ejecutar(Id, _tra);
            Navigation.NavigateTo($"/{Id}");
        }
        catch (Exception e)
        {
            _mensajeError = e.Message;
        }
    }
    protected override void OnParametersSet()
    {
        _tra = casoDeUsoExpedienteConsultaPorId.Ejecutar(IdTramite);
        _aux = new() { Contenido = _tra.Contenido };

    }
     bool PoseePermiso()
    {
        try
        {
            if (!ServicioAutorizacion.PoseeElPermiso(Id, Permiso.TramiteModificacion))
            {
                _mensajeError = "No tiene los permisos necesarios para realizar esta operación";
                return false;
            }
            return true;
        }
        catch
        {
            _mensajeError = "Ocurrió un error validando su usuario";
            return false;
        }
    }

}
<style>
    .margin {
        margin-bottom: 10px;
        margin-top: 30px;

    }
</style>